// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.296
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Experts.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Akcje moderatora")]
    public partial class AkcjeModeratoraFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ModeratorActions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pl-PL"), "Akcje moderatora", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dostępność logu systemowego")]
        public virtual void DostepnoscLoguSystemowego()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dostępność logu systemowego", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("że jestem zalogowany jako moderator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Zakładając ");
#line 5
 testRunner.When("przejdę do /", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Jeśli ");
#line 6
 testRunner.And("kliknę przycisk Zdarzenia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 7
 testRunner.Then("zobaczę tekst Log systemowy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wtedy ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Reakcja na zdarzenie w logu systemowym")]
        public virtual void ReakcjaNaZdarzenieWLoguSystemowym()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reakcja na zdarzenie w logu systemowym", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("że jestem zalogowany jako ekspert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Zakładając ");
#line 11
 testRunner.When("przejdę do /edytuj-profil", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Jeśli ");
#line 12
 testRunner.And("wpiszę do pola Publiczna nazwa użytkownika tekst Niezweryfikowana nazwa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 13
 testRunner.And("kliknę Zapisz pod formularzem edycji publicznej nazwy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 14
 testRunner.And("kliknę przycisk Wyloguj się", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 15
 testRunner.And("zaloguję się jako moderator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 16
 testRunner.And("przejdę do /", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 17
 testRunner.And("kliknę przycisk Zdarzenia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 18
 testRunner.And("kliknę przycisk reakcja", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 19
 testRunner.And("kliknę radio button Zaakceptuj", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 20
 testRunner.And("do pola tekstowego wpiszę tekst Zaakceptowano nową nazwę eksperta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 21
 testRunner.And("kliknę przycisk Potwierdź", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Oraz ");
#line 22
 testRunner.Then("nie zobaczę tekstu reakcja", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wtedy ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

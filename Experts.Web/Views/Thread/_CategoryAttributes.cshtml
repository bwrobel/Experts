@model Experts.Web.Models.Threads.CategoryAttributesThreadFormModel
@using Experts.Core.Entities

@foreach (var attribute in Model.CategoryAttributes)
{
    var hasChildren = attribute.ChildAttributes.Any();
    var propertyPrefix = string.Format("ThreadForm.AttributeValues[{0}].", attribute.Id);
    var changeScript = hasChildren ? string.Format("javascript:thread.refreshSubAttributes(this, {0})", attribute.Id) : string.Empty;
    var id = attribute.Name.Replace(" ", "_");
    var controlAttributes = new {onchange = changeScript, id};

    var attributeValue = Model.CategoryAttributeValues == null ? null : Model.CategoryAttributeValues.SingleOrDefault(av => av.AttributeId == attribute.Id);


    <div class="control-group">
        @Html.Hidden("ThreadForm.AttributeValues.Index", attribute.Id)
        @Html.Hidden(propertyPrefix + "AttributeId", attribute.Id)

        <label class="control-label" for="@id">@attribute.Name:</label>

        <div class="controls">
            @switch (attribute.Type)
            {
                case CategoryAttributeType.SingleLineText:
                    @Html.TextBox(propertyPrefix + "Value", attributeValue != null ? attributeValue.Value : string.Empty, controlAttributes)
                    break;
                case CategoryAttributeType.MultiLineText:
                    @Html.TextArea(propertyPrefix + "Value", attributeValue != null ? attributeValue.Value : string.Empty, controlAttributes)
                    break;
                case CategoryAttributeType.SingleSelect:
                    var selectListItems = attribute.Options.Select(o => new SelectListItem { Text = o.Value, Value = o.Id.ToString(), Selected = attributeValue != null && attributeValue.Value == o.Id.ToString() }).ToList();
                    selectListItems.Insert(0, new SelectListItem {Text = "-", Value = "-1"});
                    @Html.DropDownList(propertyPrefix + "Value", selectListItems, controlAttributes)
                    break;
                case CategoryAttributeType.MultiSelect:
                    var listIndex = 0;
                    foreach (var option in attribute.Options)
                    {
                        var checkboxId = controlAttributes.id + "_" + option.Id;
                        
                        <div class="unbreakable">
                            @Html.CheckBox(propertyPrefix + "Values[" + listIndex + "]", attributeValue != null && bool.Parse(attributeValue.Values[listIndex]), new { onchange = "logger.info('opcje dodatkowe', 'wybrano "+ propertyPrefix + listIndex + "');" + changeScript, checkboxId })
                            @Html.Label(checkboxId, option.Value)
                        </div>
            
                        listIndex++;
                    }
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            @if (hasChildren)
            {
                <div class="sub-attributes" data-attribute-id="@attribute.Id">
                    @Html.Action(MVC.Thread.ChildCategoryAttributes(Model.CategoryAttributeValues, attribute.Id))
                </div>
            }
        </div>
    </div>

}
